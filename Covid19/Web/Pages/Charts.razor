@page "/charts/{CountryName}"
@inject HttpClient Http
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using System.Drawing;

<h3>@(Country?.Name ?? CountryName)</h3>

@if (!loaded) {
    <Loading />
} else if (Country == null) {
    <p><em>No data for @CountryName</em></p>
} else {
    <p>
        <strong>
            @Country.Name:
            <span class="confirmed">@Country.LastRecord?.Confirmed.ToString("n0") Confirmed</span> /
            <span class="recovered">@Country.LastRecord?.Recovered.ToString("n0") Recovered</span> /
            <span class="deaths">@Country.LastRecord?.Deaths.ToString("n0") Deaths</span> /
            <span class="current">@Country.LastRecord?.Current.ToString("n0") Current</span>
        </strong>
    </p>

    <ChartJsLineChart @ref="lineChartJs" Config="@lineConfig" Width="600" Height="300" />
}

@code {
    [Parameter]
    public string CountryName { get; set; }

    bool loaded = false;
    CountryDto Country;
    LineConfig lineConfig;
    ChartJsLineChart lineChartJs;

    protected override async Task OnInitializedAsync() {
        try {
            Country = await Http.GetJsonAsync<CountryDto>(Constants.ApiUrl + "/countries/" + CountryName);
        } catch (Exception) {
        }

        loaded = true;

        if (Country == null) {
            return;
        }

        ConfigureChart();
        CreateDataSet(Color.Orange, "Confirmed", Country.Records.Select(i => (i.Date, i.Confirmed)));
        CreateDataSet(Color.Red, "Deaths", Country.Records.Select(i => (i.Date, i.Deaths)));
        CreateDataSet(Color.Green, "Recovered", Country.Records.Select(i => (i.Date, i.Recovered)));
        CreateDataSet(Color.Blue, "Current", Country.Records.Select(i => (i.Date, i.Current)));
    }

    private void ConfigureChart() {
        lineConfig = new LineConfig {
            Options = new LineOptions {
                Responsive = true,
                Title = new OptionsTitle {
                    Display = true,
                },
                Legend = new Legend {
                    Position = Position.Top,
                    Labels = new LegendLabelConfiguration {
                        UsePointStyle = true,
                    }
                },
                Tooltips = new Tooltips {
                    Mode = InteractionMode.Nearest,
                    Intersect = false,
                },
                Scales = new Scales {
                    xAxes = new List<CartesianAxis> {
                        new TimeAxis {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks {
                                Source = TickSource.Data,
                            },
                            Time = new TimeOptions {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "DD/MM/YYYY",
                            },
                        },
                    },
                },
                Hover = new LineOptionsHover {
                    Intersect = true,
                    Mode = InteractionMode.Y,
                }
            }
        };
    }

    private void CreateDataSet(Color colour, string name, IEnumerable<(DateTime Date, int Value)>
        data) {
        var dataSet = new LineDataset<TimeTuple<int>> {
            BorderColor = ColorUtil.FromDrawingColor(colour),
            Label = name,
            Fill = false,
            BorderWidth = 3,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False,
        };

        dataSet.AddRange(data.Select(i => new TimeTuple<int>(new Moment(i.Date), i.Value)));

        lineConfig.Data.Datasets.Add(dataSet);
    }
}
