@page "/charts/{CountryName}"
@inject HttpClient Http
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.Util
@using System.Drawing;

<h3>@(Country?.Name ?? CountryName)</h3>

@if (!loaded) {
    <Loading />
} else if (Country == null) {
    <p><em>No data for @CountryName</em></p>
} else {
    <div class="row">
        <div class="col">
            <p>
                <strong>
                    @Country.Name:
                    <span class="confirmed">@Country.LastRecord?.AccumulatedConfirmed.ToString("n0") Confirmed</span> /
                    <span class="recovered">
                        @Country.LastRecord?.AccumulatedRecovered.ToString("n0") Recovered (@Country.GetEstimatedRecovered(Country.LastRecord).ToString("n0") estimate)
                    </span> /
                    <span class="deaths">@Country.LastRecord?.AccumulatedDeaths.ToString("n0") Deaths</span> /
                    <span class="current">@Country.LastRecord?.CurrentlyActive.ToString("n0") Current (@Country.GetEstimatedCurrent(Country.LastRecord).ToString("n0") estimate)</span> /
                </strong>
            </p>
            <p>
                Estimated recovery stats are calculated based on a <strong>3 week</strong> average recovery time.
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-12 col-lg-6">
            <ChartJsLineChart @ref="accumulationLineChartJs" Config="@accumulationLineConfig" Width="600" Height="400" />
        </div>
        <div class="col-12 col-lg-6">
            <ChartJsBarChart @ref="dailyConfirmedBarChartJs" Config="@dailyConfirmedBarConfig" Width="600" Height="400" />
        </div>
        <div class="col-12 col-lg-6">
            <ChartJsBarChart @ref="dailyDeathsBarChartJs" Config="@dailyDeathsBarConfig" Width="600" Height="400" />
        </div>
    </div>
}

@code {
    [Parameter]
    public string CountryName { get; set; }

    bool loaded = false;
    CountryDto Country;
    LineConfig accumulationLineConfig;
    ChartJsLineChart accumulationLineChartJs;
    BarConfig dailyConfirmedBarConfig;
    ChartJsBarChart dailyConfirmedBarChartJs;
    BarConfig dailyDeathsBarConfig;
    ChartJsBarChart dailyDeathsBarChartJs;

    protected override async Task OnInitializedAsync() {
        try {
            Country = await Http.GetJsonAsync<CountryDto>(Constants.ApiUrl + "/countries/" + CountryName);
        } catch (Exception) {
        }

        loaded = true;

        if (Country == null) {
            return;
        }

        CreateAccumulationChart();
        CreateDailyConfirmedChart();
        CreateDailyDeathsChart();
    }

    private void CreateAccumulationChart() {
        ConfigureAccumulationChart();
        CreateDataSet(accumulationLineConfig, Color.Orange, "Confirmed", Country.Records.Select(i => (i.Date, i.AccumulatedConfirmed)));
        CreateDataSet(accumulationLineConfig, Color.Red, "Deaths", Country.Records.Select(i => (i.Date, i.AccumulatedDeaths)));
        CreateDataSet(accumulationLineConfig, Color.Green, "Recovered", Country.Records.Select(i => (i.Date, i.AccumulatedRecovered)));
        CreateDataSet(accumulationLineConfig, Color.Green, "Estimated Recovered", Country.Records.Select(i => (i.Date, Country.GetEstimatedRecovered(i))), true);
        CreateDataSet(accumulationLineConfig, Color.Blue, "Current", Country.Records.Select(i => (i.Date, i.CurrentlyActive)));
        CreateDataSet(accumulationLineConfig, Color.Blue, "Estimated Current", Country.Records.Select(i => (i.Date, Country.GetEstimatedCurrent(i))), true);
    }

    private void ConfigureAccumulationChart() {
        accumulationLineConfig = new LineConfig {
            Options = new LineOptions {
                Responsive = true,
                Title = new OptionsTitle {
                    Display = true,
                    Text = "Accumulated Stats",
                },
                Legend = new Legend {
                    Position = Position.Top,
                    Labels = new LegendLabelConfiguration {
                        UsePointStyle = true,
                    }
                },
                Tooltips = new Tooltips {
                    Mode = InteractionMode.Nearest,
                    Intersect = false,
                },
                Scales = new Scales {
                    xAxes = new List<CartesianAxis> {
                        new TimeAxis {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks {
                                Source = TickSource.Data,
                            },
                            Time = new TimeOptions {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "DD/MM/YYYY",
                            },
                        },
                    },
                },
                Hover = new LineOptionsHover {
                    Intersect = true,
                    Mode = InteractionMode.Y,
                }
            }
        };
    }

    private void CreateDailyConfirmedChart() {
        dailyConfirmedBarConfig = ConfigureDailyChart("New cases per day");
        CreateDataSet(dailyConfirmedBarConfig, Color.Orange, "Confirmed", Country.Records.Select(i => (i.Date, i.NewConfirmed)));
    }

    private void CreateDailyDeathsChart() {
        dailyDeathsBarConfig = ConfigureDailyChart("Deaths per day");
        CreateDataSet(dailyDeathsBarConfig, Color.Red, "Deaths", Country.Records.Select(i => (i.Date, i.NewDeaths)));
    }

    private BarConfig ConfigureDailyChart(string title) {
        return new BarConfig {
            Options = new BarOptions {
                Responsive = true,
                Title = new OptionsTitle {
                    Display = true,
                    Text = title,
                },
                Legend = new Legend {
                    Position = Position.Top,
                    Labels = new LegendLabelConfiguration {
                        UsePointStyle = true,
                    }
                },
                Tooltips = new Tooltips {
                    Mode = InteractionMode.Nearest,
                    Intersect = false,
                },
                Scales = new BarScales {
                    XAxes = new List<CartesianAxis> {
                        new TimeAxis {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks {
                                Source = TickSource.Data,
                            },
                            Time = new TimeOptions {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "DD/MM/YYYY",
                            },
                            Offset = true,
                        },
                    },
                },
            }
        };
    }

    private void CreateDataSet(LineConfig lineConfig, Color colour, string name, IEnumerable<(DateTime Date, int Value)> data, bool useDottedLine = false) {
        var dataSet = new LineDataset<TimeTuple<int>> {
            BorderColor = ColorUtil.FromDrawingColor(colour),
            Label = name,
            Fill = false,
            BorderWidth = 3,
            SteppedLine = SteppedLine.False,
        };

        if (useDottedLine) {
            dataSet.BorderDash = new int[2] { 2, 2 };
        }

        dataSet.AddRange(data.Select(i => new TimeTuple<int>(new Moment(i.Date), i.Value)));

        lineConfig.Data.Datasets.Add(dataSet);
    }

    private void CreateDataSet(BarConfig barConfig, Color colour, string name, IEnumerable<(DateTime Date, int Value)> data) {
        var dataSet = new BarDataset<TimeTuple<int>> {
            BackgroundColor = ColorUtil.FromDrawingColor(colour),
            Label = name,
        };

        dataSet.AddRange(data.Select(i => new TimeTuple<int>(new Moment(i.Date), i.Value)));

        barConfig.Data.Datasets.Add(dataSet);
    }
}
